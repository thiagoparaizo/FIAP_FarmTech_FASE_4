# debug_app.py

"""
Script para debuggar o registro do blueprint ML
"""

import sys
import os
sys.path.insert(0, os.path.abspath('.'))

def test_blueprint_import():
    """Testa import individual dos blueprints"""
    print("üîç Testando imports individuais...")
    
    try:
        from app.routes.web_routes import web_bp
        print("‚úÖ web_bp importado")
    except Exception as e:
        print(f"‚ùå web_bp erro: {e}")
    
    try:
        from app.routes.api_routes import api_bp
        print("‚úÖ api_bp importado")
    except Exception as e:
        print(f"‚ùå api_bp erro: {e}")
    
    try:
        from app.routes.sensor_routes import sensor_bp
        print("‚úÖ sensor_bp importado")
    except Exception as e:
        print(f"‚ùå sensor_bp erro: {e}")
    
    try:
        from app.routes.catalogo_routes import catalogo_bp
        print("‚úÖ catalogo_bp importado")
    except Exception as e:
        print(f"‚ùå catalogo_bp erro: {e}")
    
    try:
        from app.routes.ml_routes import ml_bp
        print("‚úÖ ml_bp importado")
        print(f"   Blueprint name: {ml_bp.name}")
        print(f"   URL prefix: {ml_bp.url_prefix}")
        
        # Testar rotas do blueprint
        print("   Rotas registradas no blueprint:")
        for rule in ml_bp.deferred_functions:
            print(f"     {rule}")
            
    except Exception as e:
        print(f"‚ùå ml_bp erro: {e}")
        import traceback
        traceback.print_exc()

def test_app_creation():
    """Testa cria√ß√£o da aplica√ß√£o passo a passo"""
    print("\nüîç Testando cria√ß√£o da aplica√ß√£o...")
    
    try:
        from flask import Flask
        app = Flask(__name__)
        print("‚úÖ Flask app criada")
        
        # Testar registro manual do ml_bp
        from app.routes.ml_routes import ml_bp
        print("‚úÖ ml_bp importado para registro")
        
        app.register_blueprint(ml_bp, url_prefix='/api/ml')
        print("‚úÖ ml_bp registrado manualmente")
        
        # Verificar rotas
        print("Rotas registradas:")
        for rule in app.url_map.iter_rules():
            if '/api/ml' in rule.rule:
                print(f"  {rule.methods} {rule.rule}")
        
        return app
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return None

def test_dependencies():
    """Testa depend√™ncias do ml_routes"""
    print("\nüîç Testando depend√™ncias do ml_routes...")
    
    try:
        from app.services.sql_db_service import SQLDatabaseService
        print("‚úÖ SQLDatabaseService importado")
    except Exception as e:
        print(f"‚ùå SQLDatabaseService erro: {e}")
    
    try:
        from app.ml.irrigation_predictor import IrrigationPredictor
        print("‚úÖ IrrigationPredictor importado")
    except Exception as e:
        print(f"‚ùå IrrigationPredictor erro: {e}")
        import traceback
        traceback.print_exc()
    
    try:
        from app.ml.model_trainer import ModelTrainer
        print("‚úÖ ModelTrainer importado")
    except Exception as e:
        print(f"‚ùå ModelTrainer erro: {e}")
    
    try:
        from app.services.climate_service import ClimateDataService
        print("‚úÖ ClimateDataService importado")
    except Exception as e:
        print(f"‚ùå ClimateDataService erro: {e}")

def test_predictor_methods():
    """Testa m√©todos espec√≠ficos do IrrigationPredictor"""
    print("\nüîç Testando m√©todos do IrrigationPredictor...")
    
    try:
        from app.ml.irrigation_predictor import IrrigationPredictor
        predictor = IrrigationPredictor()
        print("‚úÖ IrrigationPredictor instanciado")
        
        # Testar m√©todo load_models
        result = predictor.load_models()
        print(f"‚úÖ load_models(): {result}")
        
        # Testar m√©todo get_feature_importance
        importance = predictor.get_feature_importance()
        print(f"‚úÖ get_feature_importance(): {type(importance)}")
        
    except Exception as e:
        print(f"‚ùå Erro nos m√©todos: {e}")
        import traceback
        traceback.print_exc()

def main():
    print("üöÄ Debug Blueprint ML Registration")
    print("=" * 50)
    
    # 1. Testar imports
    test_blueprint_import()
    
    # 2. Testar depend√™ncias
    test_dependencies()
    
    # 3. Testar m√©todos espec√≠ficos
    test_predictor_methods()
    
    # 4. Testar cria√ß√£o manual da app
    app = test_app_creation()
    
    if app:
        print("\n‚úÖ Aplica√ß√£o criada com sucesso!")
        print("üîç Testando rota manual...")
        
        with app.test_client() as client:
            response = client.get('/api/ml/status')
            print(f"Status code: {response.status_code}")
            if response.status_code == 200:
                print(f"Response: {response.get_json()}")
            else:
                print(f"Error: {response.data}")

if __name__ == "__main__":
    main()